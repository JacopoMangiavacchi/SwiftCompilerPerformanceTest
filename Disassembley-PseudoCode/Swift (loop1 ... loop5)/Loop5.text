int _$S28SwiftCompilerPerformanceTest9testLoop5ys5Int64VSayADGz_SitF(int arg0, int arg1) {
    rsi = arg1;
    rdi = arg0;
    rdx = HIQWORD(rsi * 0x6666666666666667);
    if (rsi >= 0xfffffffffffffff7) {
            rax = *rdi;
            if (rsi >= 0xa) {
                    rdx = (SAR(rdx, 0x2)) + (rdx >> 0x3f);
                    rax = rax + 0x20;
                    r8 = rdx & 0x3;
                    if (rdx >= 0x4) {
                            rcx = r8 - rdx;
                            xmm0 = intrinsic_movaps(xmm0, *(int128_t *)0x100007870);
                            do {
                                    *(int128_t *)rax = intrinsic_movups(*(int128_t *)rax, xmm0);
                                    *(int128_t *)(rax + 0x10) = intrinsic_movups(*(int128_t *)(rax + 0x10), xmm0);
                                    *(int128_t *)(rax + 0x20) = intrinsic_movups(*(int128_t *)(rax + 0x20), xmm0);
                                    *(int128_t *)(rax + 0x30) = intrinsic_movups(*(int128_t *)(rax + 0x30), xmm0);
                                    *(int128_t *)(rax + 0x40) = intrinsic_movups(*(int128_t *)(rax + 0x40), xmm0);
                                    *(int128_t *)(rax + 0x50) = intrinsic_movups(*(int128_t *)(rax + 0x50), xmm0);
                                    *(int128_t *)(rax + 0x60) = intrinsic_movups(*(int128_t *)(rax + 0x60), xmm0);
                                    *(int128_t *)(rax + 0x70) = intrinsic_movups(*(int128_t *)(rax + 0x70), xmm0);
                                    *(int128_t *)(rax + 0x80) = intrinsic_movups(*(int128_t *)(rax + 0x80), xmm0);
                                    *(int128_t *)(rax + 0x90) = intrinsic_movups(*(int128_t *)(rax + 0x90), xmm0);
                                    *(int128_t *)(rax + 0xa0) = intrinsic_movups(*(int128_t *)(rax + 0xa0), xmm0);
                                    *(int128_t *)(rax + 0xb0) = intrinsic_movups(*(int128_t *)(rax + 0xb0), xmm0);
                                    *(int128_t *)(rax + 0xc0) = intrinsic_movups(*(int128_t *)(rax + 0xc0), xmm0);
                                    *(int128_t *)(rax + 0xd0) = intrinsic_movups(*(int128_t *)(rax + 0xd0), xmm0);
                                    *(int128_t *)(rax + 0xe0) = intrinsic_movups(*(int128_t *)(rax + 0xe0), xmm0);
                                    *(int128_t *)(rax + 0xf0) = intrinsic_movups(*(int128_t *)(rax + 0xf0), xmm0);
                                    *(int128_t *)(rax + 0x100) = intrinsic_movups(*(int128_t *)(rax + 0x100), xmm0);
                                    *(int128_t *)(rax + 0x110) = intrinsic_movups(*(int128_t *)(rax + 0x110), xmm0);
                                    *(int128_t *)(rax + 0x120) = intrinsic_movups(*(int128_t *)(rax + 0x120), xmm0);
                                    *(int128_t *)(rax + 0x130) = intrinsic_movups(*(int128_t *)(rax + 0x130), xmm0);
                                    rax = rax + 0x140;
                                    rcx = rcx + 0x4;
                            } while (rcx != 0x0);
                    }
                    if (r8 != 0x0) {
                            r8 = -r8;
                            xmm0 = intrinsic_movaps(xmm0, *(int128_t *)0x100007870);
                            do {
                                    *(int128_t *)rax = intrinsic_movups(*(int128_t *)rax, xmm0);
                                    *(int128_t *)(rax + 0x10) = intrinsic_movups(*(int128_t *)(rax + 0x10), xmm0);
                                    *(int128_t *)(rax + 0x20) = intrinsic_movups(*(int128_t *)(rax + 0x20), xmm0);
                                    *(int128_t *)(rax + 0x30) = intrinsic_movups(*(int128_t *)(rax + 0x30), xmm0);
                                    *(int128_t *)(rax + 0x40) = intrinsic_movups(*(int128_t *)(rax + 0x40), xmm0);
                                    rax = rax + 0x50;
                                    r8 = r8 + 0x1;
                            } while (r8 != 0x0);
                    }
                    rax = *rdi;
            }
            if (rsi >= 0xffffffffffffffff) {
                    rcx = SAR((rsi >> 0x3f) + rsi, 0x1);
                    if (rcx < *(rax + **_$Ss27_ContiguousArrayStorageBaseC16countAndCapacitys01_B4BodyVvpWvd)) {
                            rax = *(rax + rcx * 0x8 + 0x20);
                    }
                    else {
                            asm { ud2 };
                            rax = loc_10000371b();
                    }
            }
            else {
                    asm { ud2 };
                    rax = loc_10000371b();
            }
    }
    else {
            asm { ud2 };
            rax = sub_10000371f();
    }
    return rax;
}
